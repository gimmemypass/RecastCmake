#include <Shell.h>
#include <gtest/gtest.h>

#define GTEST_COUT std::cerr << "[          ] [ INFO ]"


/*class TileCacheConfig
{
    public:
        TileCacheConfig();
        ~TileCacheConfig();
        rcConfig config;
        TileCacheSetHeader* header;
        TileCacheTileHeader* tilesHeader;
        unsigned char* tilesData;
};
TileCacheConfig Config(){
    auto config = new rcConfig();
    config->bmax[0] = 8.1;
    config->bmax[1] = 1.32;
    config->bmax[2] = 5.05;

    config->bmin[0] = -7.72;
    config->bmin[1] = -6.664;
    config->bmin[2] = -5.24;

    config->borderSize = 5;
    config->ch = 0.2;
    config->cs = 0.1;
    config->detailSampleDist = 1.8;
    config->detailSampleMaxError = 0.2;
    config->height = 58;
    config->maxEdgeLen = 40;
    config->maxVertsPerPoly = 5;
    config->maxSimplificationError = 1.3;
    config->mergeRegionArea = 400;
    config->minRegionArea = 64;
    config->tileSize = 48;
    config->walkableClimb = 4;
    config->walkableHeight = 10;
    config->walkableRadius = 2;
    config->walkableSlopeAngle = 20;
    config->width = 58;

    TileCacheSetHeader* header = new TileCacheSetHeader;
    header->cacheParams.ch = 0.2;
    header->cacheParams.cs = 0.1;
    header->cacheParams.height = 48;
    header->cacheParams.maxObstacles = 20;
    header->cacheParams.maxSimplificationError = 1.3;
    header->cacheParams.maxTiles = 48;
    header->cacheParams.orig[0] = -7.72;
    header->cacheParams.orig[1] = -6.664;
    header->cacheParams.orig[2] = -5.24;
    header->cacheParams.walkableClimb = 0.8;
    header->cacheParams.walkableHeight = 2;
    header->cacheParams.walkableRadius = 0.4;
    header->cacheParams.width = 48;
    header->magic = 1414743380;
    header->meshParams.maxPolys = 65536;
    header->meshParams.maxTiles = 64;
    header->meshParams.orig[0] = -7.72;
    header->meshParams.orig[1] = -6.664;
    header->meshParams.orig[2] = -5.24;
    header->meshParams.tileHeight = 4.8;
    header->meshParams.tileWidth = 4.8;
    header->numTiles = 6;
    header->version = 1;

    unsigned char* tilesData = new unsigned char[3094]{
        82,76,84,68,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,10,247,192,128,223,10,62,20,174,167,192,70,225,58,192,128,223,10,62,160,71,225,190,34,0,34,0,48,48,9,47,11,47,204,204,1,255,255,224,253,1,224,253,1,224,2,1,0,0,224,29,0,226,0,61,224,29,46,224,253,47,224,158,47,225,0,219,64,0,33,187,224,22,0,64,37,224,1,0,224,22,44,224,7,46,224,24,47,32,34,224,4,0,32,65,224,19,0,224,4,43,64,0,224,19,44,32,0,64,34,224,5,0,32,20,224,18,0,224,5,43,64,0,224,18,44,32,0,64,33,224,5,0,32,20,224,18,0,224,5,43,32,0,224,18,43,32,0,32,32,224,6,0,32,20,224,18,0,224,6,44,32,0,224,18,44,32,0,32,32,224,6,0,32,20,224,18,0,224,6,44,32,0,224,18,44,64,0,32,33,224,5,0,64,20,224,18,0,224,5,44,32,0,224,18,43,64,0,32,33,224,5,0,64,20,224,18,0,224,5,44,32,0,224,18,43,64,0,32,33,224,5,0,64,20,224,18,0,224,5,44,32,0,224,18,43,64,0,32,33,224,5,0,64,20,224,19,0,224,5,45,224,25,47,224,7,48,32,17,224,27,0,32,89,128,0,224,27,44,32,0,128,44,32,0,32,11,224,27,0,32,41,128,0,224,27,44,32,0,128,44,32,0,32,11,224,253,0,224,253,0,224,40,0,0,63,224,29,0,226,0,99,224,29,46,224,253,47,224,158,47,225,0,219,64,0,33,187,224,22,0,64,37,224,1,0,224,22,44,224,7,46,224,24,47,32,34,224,4,0,32,65,224,19,0,224,4,43,64,0,224,19,44,32,0,64,34,224,5,0,32,20,224,18,0,224,5,43,64,0,224,18,44,32,0,64,33,224,5,0,32,20,224,18,0,224,5,43,32,0,224,18,43,32,0,32,32,224,6,0,32,20,224,18,0,224,6,44,32,0,224,18,44,32,0,32,32,224,6,0,32,20,224,18,0,224,6,44,32,0,224,18,44,64,0,32,33,224,5,0,64,20,224,18,0,224,5,44,32,0,224,18,43,64,0,32,33,224,5,0,64,20,224,18,0,224,5,44,32,0,224,18,43,64,0,32,33,224,5,0,64,20,224,18,0,224,5,44,32,0,224,18,43,64,0,32,33,224,5,0,64,20,224,19,0,224,5,45,224,25,47,224,7,48,32,17,224,27,0,32,89,128,0,224,27,44,32,0,128,44,32,0,32,11,224,27,0,32,41,128,0,224,27,44,32,0,128,44,32,0,32,11,224,27,0,32,41,224,253,0,224,253,0,224,1,0,1,6,7,224,27,0,0,67,226,0,60,1,14,15,224,27,0,0,75,224,253,47,224,109,47,3,13,13,13,73,225,34,127,0,9,224,0,43,64,0,225,24,223,224,5,46,224,24,47,224,6,46,224,23,47,224,7,46,224,22,47,0,11,32,33,224,5,0,0,12,226,20,158,224,9,47,224,21,96,224,87,47,224,8,238,1,0,6,224,19,191,224,87,142,224,87,95,1,15,3,32,225,224,5,0,226,21,111,224,9,144,224,253,47,192,47,225,9,80,225,21,31,224,9,48,224,23,47,0,15,102,30,229,145,255,1,44,45,224,23,0,4,45,45,45,45,105,82,76,84,68,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,70,225,58,192,128,223,10,62,20,174,167,192,220,163,240,63,128,223,10,62,160,71,225,190,34,0,34,0,48,48,0,47,11,47,204,204,1,255,255,224,253,1,224,255,1,0,0,224,253,0,224,208,0,225,39,225,228,3,29,226,27,26,224,3,47,224,27,48,32,37,224,2,0,224,25,97,224,2,44,32,0,224,182,47,224,25,190,224,5,239,32,15,224,23,0,33,20,224,1,0,224,23,44,32,0,224,1,44,32,0,32,15,224,23,0,32,37,224,2,0,224,23,45,224,253,47,224,128,47,33,143,224,31,0,65,228,224,31,43,224,253,0,224,253,0,224,183,0,0,63,224,253,0,224,208,0,225,39,225,228,3,219,226,27,26,224,3,47,224,27,48,32,37,224,2,0,224,25,97,224,2,44,32,0,224,182,47,224,25,190,224,5,239,32,15,224,23,0,33,20,224,1,0,224,23,44,32,0,224,1,44,32,0,32,15,224,23,0,32,37,224,2,0,224,23,45,224,253,47,224,128,47,33,143,224,31,0,65,228,224,31,43,224,179,0,64,231,224,253,0,224,253,0,1,22,7,224,36,0,2,67,30,15,224,36,0,0,75,224,253,47,224,65,47,1,28,13,225,37,127,3,0,0,12,13,192,0,224,26,57,32,47,224,1,0,0,12,224,25,48,224,4,47,224,26,48,224,5,47,1,0,14,224,23,97,224,197,47,0,6,224,23,238,224,6,239,225,24,30,224,54,47,225,25,224,225,197,127,225,25,80,224,197,239,226,26,111,165,255,0,3,33,28,224,26,46,229,1,207,70,53,32,15,224,23,0,229,88,255,1,60,45,224,32,0,4,45,45,45,45,105,82,76,84,68,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,220,163,240,63,128,223,10,62,20,174,167,192,145,194,213,64,128,223,10,62,160,71,225,190,34,0,34,0,48,48,0,0,11,47,204,204,1,255,255,224,253,1,224,255,1,0,0,226,38,14,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,148,47,224,253,0,224,253,0,32,0,0,63,226,38,15,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,147,47,224,253,0,224,253,0,64,0,0,18,226,38,16,0,26,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,98,47,0,56,230,33,143,4,0,0,0,0,0,82,76,84,68,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,60,10,247,192,128,223,10,62,160,71,225,190,70,225,58,192,128,223,10,62,32,133,139,64,34,0,34,0,48,48,9,47,0,45,204,204,1,255,255,160,1,0,0,224,29,0,160,45,224,253,47,224,67,47,225,30,128,32,40,160,0,225,38,175,224,39,47,224,29,94,224,1,143,32,11,224,23,0,32,132,224,1,0,224,23,44,224,6,46,224,25,47,32,35,224,3,0,32,64,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,20,0,224,3,43,64,0,224,20,44,32,0,64,35,224,3,0,32,18,224,20,0,224,3,43,64,0,224,20,44,32,0,64,35,224,3,0,32,18,224,20,0,224,3,43,64,0,224,20,44,64,0,64,36,224,2,0,64,18,224,21,0,224,2,44,32,0,224,21,43,96,0,32,37,224,1,0,96,17,224,22,0,224,1,45,224,29,47,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,7,44,32,18,224,20,0,224,6,47,224,20,43,224,82,0,224,0,134,0,63,224,29,0,224,253,47,224,74,47,225,30,128,32,40,160,0,225,38,175,224,39,47,224,29,94,224,1,143,32,11,224,23,0,32,132,224,1,0,224,23,44,224,6,46,224,25,47,32,35,224,3,0,32,64,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,20,0,224,3,43,64,0,224,20,44,32,0,64,35,224,3,0,32,18,224,20,0,224,3,43,64,0,224,20,44,32,0,64,35,224,3,0,32,18,224,20,0,224,3,43,64,0,224,20,44,64,0,64,36,224,2,0,64,18,224,21,0,224,2,44,32,0,224,21,43,96,0,32,37,224,1,0,96,17,224,22,0,224,1,45,224,29,47,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,27,44,32,0,32,41,128,0,32,11,224,27,0,128,44,32,0,224,7,44,32,18,224,20,0,224,6,47,224,20,43,224,91,0,1,134,135,224,27,0,0,195,224,0,138,1,14,15,224,27,0,0,75,224,240,47,0,12,225,27,30,225,2,31,225,29,80,225,1,79,224,87,47,0,6,32,157,224,22,0,3,13,13,13,73,32,136,128,0,226,25,15,0,9,128,40,160,0,224,24,47,224,5,46,224,24,47,0,11,32,35,224,3,0,224,23,95,224,253,47,224,161,47,226,6,14,225,23,223,225,7,222,224,215,47,1,15,3,32,227,224,3,0,226,23,255,224,7,48,224,24,47,224,6,48,224,25,47,224,5,48,224,26,47,3,15,7,7,67,224,0,194,224,27,47,229,3,15,224,253,47,224,81,47,37,236,224,10,0,229,16,255,227,7,174,224,8,0,0,12,224,4,77,224,24,46,224,74,0,4,0,0,0,0,0,82,76,84,68,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,70,225,58,192,128,223,10,62,160,71,225,190,220,163,240,63,128,223,10,62,32,133,139,64,34,0,34,0,48,48,0,47,0,45,204,204,1,0,0,224,253,1,224,253,1,224,41,1,0,255,224,4,0,226,25,75,224,4,46,224,26,48,32,35,224,4,0,224,23,97,224,4,44,32,0,224,182,47,224,23,190,224,7,239,32,17,224,21,0,33,18,224,3,0,224,21,44,32,0,224,3,44,32,0,32,17,224,21,0,32,35,224,3,0,224,21,44,32,0,224,3,44,32,0,32,17,224,21,0,32,35,224,3,0,224,21,44,32,0,224,3,44,32,0,32,17,224,21,0,32,35,224,3,0,224,21,44,32,0,224,3,44,32,0,32,17,224,21,0,32,35,224,3,0,224,21,44,32,0,224,3,44,32,0,32,17,224,21,0,32,35,224,3,0,224,21,44,32,0,224,3,44,224,26,46,224,5,47,32,15,224,25,0,32,86,224,29,40,224,253,0,224,166,0,33,220,224,24,0,225,3,216,224,24,44,64,0,224,2,48,64,14,224,83,0,0,63,224,253,0,224,253,0,224,42,0,226,2,170,32,0,226,25,76,32,36,224,3,0,224,24,48,224,3,44,64,0,224,23,48,64,35,224,3,0,224,182,47,224,23,190,224,7,239,32,17,224,21,0,225,3,27,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,3,0,32,17,224,21,0,224,3,44,32,0,224,21,44,32,0,32,35,224,2,0,32,16,224,22,0,224,2,44,224,27,46,32,0,32,39,224,26,87,224,253,0,224,169,0,33,220,224,24,0,225,3,219,224,24,44,64,0,224,2,48,64,14,224,83,0,1,150,135,224,36,0,2,195,30,15,224,36,0,0,75,224,253,47,224,161,47,1,28,13,224,3,0,225,24,235,0,75,226,5,155,0,12,224,23,48,224,6,47,224,24,48,224,7,47,1,0,14,224,21,97,224,199,47,0,6,224,21,238,224,8,239,225,22,30,224,253,47,224,253,47,224,11,47,226,23,110,226,6,63,224,24,46,3,15,75,22,3,35,180,2,0,6,7,96,0,32,16,224,22,0,38,47,64,41,224,22,37,224,1,0,32,47,224,36,0,224,253,47,224,18,47,229,5,255,224,13,0,225,2,113,229,8,111,224,11,0,230,2,21,224,28,47,1,0,12,224,0,119,0,73,32,13,224,79,0,4,0,0,0,0,0,82,76,84,68,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,220,163,240,63,128,223,10,62,160,71,225,190,145,194,213,64,128,223,10,62,32,133,139,64,34,0,34,0,48,48,0,0,0,45,204,204,2,0,255,255,224,36,0,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,55,47,224,87,0,1,63,0,224,37,0,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,55,47,224,87,0,0,146,224,38,96,0,26,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,253,47,224,6,47,0,24,232,38,63,224,82,0,4,0,0,0,0,0 
    };
    TileCacheTileHeader* tileHeader = new TileCacheTileHeader[6];
    tileHeader[0].dataSize = 754;
    tileHeader[0].tileRef = 64;

    tileHeader[1].dataSize = 401;
    tileHeader[1].tileRef = 65;

    tileHeader[2].dataSize = 172;
    tileHeader[2].tileRef = 66;

    tileHeader[3].dataSize = 945;
    tileHeader[3].tileRef = 67;

    tileHeader[4].dataSize = 645;
    tileHeader[4].tileRef = 68;

    tileHeader[5].dataSize = 177;
    tileHeader[5].tileRef = 69;
    TileCacheConfig tileCacheConfig;
    tileCacheConfig.config = *config;
    tileCacheConfig.header = header;
    tileCacheConfig.tilesData = tilesData;
    tileCacheConfig.tilesHeader = tileHeader;
    return tileCacheConfig;
}
*/

TEST(RecastTests, TestMaxFlagsCount)
{
    ASSERT_EQ(MAX_FLAGS, 16);
}
TEST(RecastTests, TestNumFlags)
{
    auto shell = new Shell();
    ASSERT_EQ(shell->numFlags, 0);
}
TEST(RecastTests, TestAddingFlag)
{
    auto shell = new Shell();
    shell->addFlag(1, 1);
}